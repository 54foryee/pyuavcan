#
# Copyright (c) 2019 UAVCAN Development Team
# This software is distributed under the terms of the MIT License.
# Author: Pavel Kirienko <pavel.kirienko@zubax.com>
#

import typing
import pathlib
import argparse
import pyuavcan
import dataclasses


# The path is made unique per version to ensure that we won't attempt to load packages generated by another version.
DEFAULT_DSDL_GENERATED_PACKAGES_DIRECTORY = \
    pathlib.Path(f'~/.uavcan/pyuavcan/v{".".join(map(str, pyuavcan.__version__[:2]))}/dsdl-generated/').expanduser()


@dataclasses.dataclass(frozen=True)
class CommandInfo:
    """
    The name of the Python module (or package) will be used as the primary name of the command with underscores
    replaced with minus characters: "foo_bar.py" --> "foo-bar". Aliases are optional.
    """
    help:     str
    examples: str = ''
    aliases:  typing.Sequence[str] = dataclasses.field(default_factory=list)


def add_argument_local_node_id(parser: argparse.ArgumentParser) -> None:
    parser.add_argument('--local-node-id', '-L',
                        default='naive',
                        metavar='INTEGER|pnp|naive',
                        help='Node-ID to use for the requested operation. Could be either a specific integer '
                             'value or one of the special values: "pnp" to perform plug-and-play allocation; '
                             '"naive" to select the highest node-ID which does not seem to be occupied at the time '
                             'when the command is launched (default).')


def add_argument_iface(parser: argparse.ArgumentParser) -> None:
    parser.add_argument('--iface', '-i',
                        action='append',
                        nargs='+',
                        help='Transport media interface to use. '
                             'Specify more than once to use redundant interfaces.')
