#!/usr/bin/env python3

import sys
import typing
import pathlib
import logging
import asyncio
import argparse
import importlib


logging.basicConfig(stream=sys.stderr,
                    level=logging.WARNING,
                    format='%(asctime)s %(process)5d %(levelname)-8s %(name)s: %(message)s')

_logger = logging.getLogger(__name__.replace('__', ''))

try:
    import pyuavcan
except ImportError:
    _logger.warning('Running from sources')
    sys.path.append(str(pathlib.Path(__file__).absolute().parent.parent))
    import pyuavcan


# The path is made unique per version to ensure that we won't attempt to load packages generated by another version.
DSDL_GENERATED_PACKAGES_DIRECTORY = \
    pathlib.Path(f'~/.uavcan/pyuavcan/v{".".join(map(str, pyuavcan.__version__[:2]))}/dsdl-generated/').expanduser()

DEFAULT_PUBLIC_REGULATED_DATA_TYPES_ZIP_URL = \
    'https://github.com/UAVCAN/public_regulated_data_types/archive/f468909db282e524eb6410187f02a33720f196d4.zip'


def _generate_standard_data_types_package() -> None:
    roots_dir = _dsdl.fetch_dsdl_root_namespaces(DEFAULT_PUBLIC_REGULATED_DATA_TYPES_ZIP_URL)
    _dsdl.generate_dsdl_packages(directory_with_root_namespaces=roots_dir,
                                 directory_for_generated_packages=DSDL_GENERATED_PACKAGES_DIRECTORY)


sys.path.insert(0, str(DSDL_GENERATED_PACKAGES_DIRECTORY))
import _dsdl
try:
    import uavcan
except ImportError:
    print('LOADING, SUKA', file=sys.stderr)
    _generate_standard_data_types_package()
    importlib.invalidate_caches()
    import uavcan


arg_parser = argparse.ArgumentParser(
    description='A command line tool for diagnostics and management of UAVCAN networks built on PyUAVCAN',
)

arg_parser.add_argument('--version',
                        help='Print the PyUAVCAN version string and exit')

arg_parser.add_argument('--verbose', '-v',
                        action='count',
                        help='Increase the verbosity of the output. Specify more than once for extra verbosity.')

arg_parser.add_argument('--local-node-id', '-L',
                        default='auto',
                        metavar='<integer>|pnp|unsafe|auto',
                        help='Node-ID to use for the requested operation. Could be either a specific integer '
                             'value or one of the special values: "pnp" to perform plug-and-play allocation; '
                             '"unsafe" to select the highest node-ID which does not seem to be occupied at the time '
                             'when the command is launched; "auto" to do the right thing automatically (default).')

arg_parser.add_argument('--iface', '-i',
                        action='append',
                        required=True,
                        help='Transport media interface to use; must be specified at least once. '
                             'Specify more than once to use redundant interfaces.')
