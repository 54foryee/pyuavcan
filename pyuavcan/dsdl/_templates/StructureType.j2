{% extends "base.j2" %}
{% block contents %}

{% for a in T.attributes if a.data_type is composite %}
import {{ a.data_type.full_namespace }}
{%- endfor -%}

{%- macro new_field(f) -%}
    self._{{ f|id }}: {{ f.data_type | type_annotation }}
{%- endmacro %}

{%- macro new_const(c) -%}
    {{ c|id }}: {{ c.data_type | type_annotation }}
{%- endmacro %}


class {{ T.short_name }}_{{ T.version.major }}_{{ T.version.minor }}(_CompositeObject_):
{%- for c in T.constants %}
    {%- if c.data_type is boolean %}
    {{ new_const(c) }} = {{ c.value.native_value }}

    {%- elif c.data_type is integer %}
    {{ new_const(c) }} = {{ c.value.as_native_integer() }}

    {%- elif c.data_type is float %}
    {{ new_const(c) }} = {{ c.value.native_value.numerator }} / {{ c.value.native_value.denominator }}

    {%- else -%}{%- assert False -%}
    {%- endif %}
{% endfor %}
    def __init__(self,
                 {%- for f in T.fields if f is not padding %}
                 {{ f|id }}: _Optional_[{{ f.data_type | type_annotation }}] = None
                 {{- '):' if loop.last else ',' }}
                 {%- endfor -%}
{% if T.deprecated %}
        _warn_('Data type {{ T }} is deprecated', DeprecationWarning)
{% endif -%}
{% for f in T.fields if f is not padding %}
    {%- if f.data_type is boolean %}
        {{ new_field(f) }} = bool({{ f|id }}) if {{ f|id }} is not None else False

    {%- elif f.data_type is integer %}
        {{ new_field(f) }} = int({{ f|id }}) if {{ f|id }} is not None else 0

    {%- elif f.data_type is float %}
        {{ new_field(f) }} = float({{ f|id }}) if {{ f|id }} is not None else 0.0

    {%- elif f.data_type is array %}
        {%- if f.data_type.element_type is integer and f.data_type.element_type.bit_length <= 8 %}
        if {{ f|id }} is None:
            {{ new_field(f) }} = bytes()
        else:
            {{ new_field(f) }} = {{ f|id }} if isinstance({{ f|id }}, bytes) else bytes({{ f|id }})
        {%- else %}
        if {{ f|id }} is None:
            {{ new_field(f) }} = []
        else:
            {{ new_field(f) }} = {{ f|id }} if isinstance({{ f|id }}, list) else list({{ f|id }})
        {%- endif %}

    {%- elif f.data_type is composite %}
        if {{ f|id }} is None:
            {{ new_field(f) }} = {{ f.data_type.full_name }}()
        elif isinstance({{ f|id }}, {{ f.data_type.full_name }}):
            {{ new_field(f) }} = {{ f|id }}
        else:
            raise ValueError(f'Field "{{ f|id }}" must be of type {{ f.data_type.full_name }}, '
                             f'got {type({{ f|id }}).__name__}')

    {%- else -%}{%- assert False -%}
    {%- endif %}
{% endfor -%}

{% for f in T.fields if f is not padding %}
    @property
    def {{ f|id }}(self) -> {{ f.data_type | type_annotation }}:
        return self._{{ f|id }}

    @{{ f|id }}.setter
    def {{ f|id }}(self, x: {{ f.data_type | type_annotation }}) -> None:
    {%- if f.data_type is boolean %}
        self._{{ f|id }} = bool(x)

    {%- elif f.data_type is integer %}
        self._{{ f|id }} = int(x)

    {%- elif f.data_type is float %}
        self._{{ f|id }} = float(x)

    {%- elif f.data_type is array %}
        {%- if f.data_type.element_type is integer and f.data_type.element_type.bit_length <= 8 %}
        self._{{ f|id }} = x if isinstance(x, bytes) else bytes(x)
        {%- else %}
        self._{{ f|id }} = x if isinstance(x, list) else list(x)
        {%- endif %}

    {%- elif f.data_type is composite %}
        if isinstance(x, {{ f.data_type.full_name }}):
            self._{{ f|id }} = x
        else:
            raise ValueError(f'Field "{{ f|id }}" must be of type {{ f.data_type.full_name }}, '
                             f'found {type(x).__name__}')

    {%- else -%}{%- assert False -%}
    {%- endif %}
{% endfor -%}

{% endblock %}
