#
# Copyright (c) 2019 UAVCAN Development Team
# This software is distributed under the terms of the MIT License.
# Author: Pavel Kirienko <pavel.kirienko@zubax.com>
#

import os
import sys
import abc
import typing
import pathlib
import argparse
import pyuavcan
from ._subsystems import SubsystemFactory as SubsystemFactory


# Base data directory. The location is OS-dependent.
if hasattr(sys, 'getwindowsversion'):  # pragma: no cover
    _appdata_env = os.getenv('LOCALAPPDATA') or os.getenv('APPDATA')
    assert _appdata_env, 'Cannot determine location of the app data directory'
    BASE_DATA_DIR = pathlib.Path(_appdata_env, 'UAVCAN', 'PyUAVCAN')
else:
    BASE_DATA_DIR = pathlib.Path('~/.uavcan/pyuavcan').expanduser()

# This path is unique per library version.
VERSION_SPECIFIC_DATA_DIR = BASE_DATA_DIR / f'v{pyuavcan.__version__}'

# It's version-specific so that we won't attempt to load packages generated by another version.
DEFAULT_DSDL_GENERATED_PACKAGES_DIR = VERSION_SPECIFIC_DATA_DIR / 'dsdl-generated-packages'

DEFAULT_PUBLIC_REGULATED_DATA_TYPES_ARCHIVE_URL = \
    'https://github.com/UAVCAN/public_regulated_data_types/archive/a532bfa7.zip'


class Command(abc.ABC):
    """
    Base command class.
    The constructor shall have no required arguments.
    """
    @property
    @abc.abstractmethod
    def names(self) -> typing.Sequence[str]:
        """
        Command names ordered by preference; first name is the main name. At least one element is required.
        """
        raise NotImplementedError

    @property
    @abc.abstractmethod
    def help(self) -> str:
        """
        Documentation help string. Limit the lines to 80 characters max.
        """
        raise NotImplementedError

    @property
    @abc.abstractmethod
    def examples(self) -> typing.Optional[str]:
        """
        Set of human-readable usage examples; None if not defined. Limit the lines to 80 characters max.
        """
        raise NotImplementedError

    @property
    @abc.abstractmethod
    def subsystem_factories(self) -> typing.Sequence[SubsystemFactory]:
        """
        Subsystems that will be instantiated before the command is executed.
        """
        raise NotImplementedError

    @abc.abstractmethod
    def register_arguments(self, parser: argparse.ArgumentParser) -> None:
        """
        Populates the specified parser instance with command arguments.
        """
        raise NotImplementedError

    @abc.abstractmethod
    def execute(self, args: argparse.Namespace, subsystems: typing.Sequence[object]) -> int:
        """
        Runs the command with the specified arguments and the subsystems constructed from the predefined factories.
        """
        raise NotImplementedError

    def __repr__(self) -> str:
        return pyuavcan.util.repr_attributes(self, names=self.names)
